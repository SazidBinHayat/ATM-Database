describe transac;
describe bank;
describe atm_machine;
describe customer;
describe donation;
describe atm_card;


select *from transac;
select *from bank;
select *from atm_machine;
select *from customer;
select *from donation;
select *from atm_card;

--(LAB 02)

ALTER TABLE DONATION 
ADD USER_NAME VARCHAR(25);

ALTER TABLE DONATION
ADD (VAT NUMBER(3),
SERVICE_CHARGE NUMBER(3));

ALTER TABLE DONATION
MODIFY (VAT NUMBER(2),
SERVICE_CHARGE NUMBER(2));

ALTER TABLE DONATION
DROP COLUMN VAT;
ALTER TABLE DONATION
DROP COLUMN SERVICE_CHARGE;
ALTER TABLE DONATION
DROP COLUMN USER_NAME;


ALTER TABLE BANK 
RENAME COLUMN BANK_BRANCH TO BANK_BRANCH_NAME;

ALTER TABLE BANK 
RENAME COLUMN BANK_BRANCH_NAME TO BANK_BRANCH;

--INSERT CARD VALUE TO SEE UPDATE WORK

UPDATE ATM_CARD 
SET EXPIRY= '03-FEB-22'
WHERE CARD_ID = 111144;

DELETE FROM ATM_CARD 
WHERE CARD_ID = 111144;


-------LAB 03------

SELECT ACC_NO,USER_NAME FROM CUSTOMER;

SELECT CARD_ID FROM TRANSAC;
SELECT DISTINCT(CARD_ID) FROM TRANSAC;

--divide transac_amount by 5 where TRANSAC_AMOUNT>=2000;
SELECT (TRANSAC_AMOUNT/5) FROM TRANSAC
WHERE TRANSAC_AMOUNT>=2000;
--USING 'AS'
SELECT (TRANSAC_AMOUNT/5) AS REDUCED_AMOUNT FROM TRANSAC
WHERE TRANSAC_AMOUNT>=2000;

--USING BETWEEN ,AND
SELECT ACC_NO FROM BANK
WHERE USER_BALANCE BETWEEN 200000 AND 500000;

--DIFF OF 'IN'  ABD 'BETWEEN'
SELECT ACC_NO,USER_NAME FROM CUSTOMER
WHERE USER_BALANCE IN (200000,500000);

--order by
SELECT ACC_NO,USER_BALANCE
FROM CUSTOMER
ORDER BY USER_BALANCE;

SELECT ACC_NO,USER_BALANCE
FROM CUSTOMER
ORDER BY ACC_NO DESC;

SELECT ACC_NO,USER_BALANCE
FROM CUSTOMER
ORDER BY USER_BALANCE,ACC_NO desc;

--like %---%
SELECT USER_NAME, ACC_NO
FROM CUSTOMER
where USER_NAME LIKE '%AV%';

--FIND ACC WHICH HAS NAME STARTED WITH A
SELECT USER_NAME, ACC_NO
FROM CUSTOMER
where USER_NAME LIKE 'A%';

--FIND ACC WHICH HAS NAME ENDS WITH E
SELECT USER_NAME, ACC_NO
FROM CUSTOMER
where USER_NAME LIKE '%E';

--FIND ACC WHICH HAS NAME WITH 'A' IN MIDDLE
SELECT USER_NAME, ACC_NO
FROM CUSTOMER
where USER_NAME LIKE '%_A_%';

--NO ROW COZ NO NAME HAS ONA IN ANY MID POS
SELECT USER_NAME, ACC_NO
FROM CUSTOMER
where USER_NAME LIKE '%_ONA_%';

SELECT USER_NAME, ACC_NO
FROM CUSTOMER
where USER_NAME LIKE '%_NAT_%';


-------LAB 04------

SELECT COUNT(*),COUNT(CARD_PIN) FROM CUSTOMER;

SELECT SUM(USER_BALANCE) FROM CUSTOMER;

SELECT COUNT(DISTINCT BANK_ID) FROM CUSTOMER;
SELECT COUNT(BANK_ID) FROM CUSTOMER;


--111122 HAS MULTIPLE(3) DONATION
SELECT CARD_ID , COUNT(DONATE_AMOUNT)
FROM DONATION
GROUP BY CARD_ID;

SELECT CARD_ID , COUNT(DONATE_AMOUNT)
FROM DONATION
GROUP BY CARD_ID
HAVING CARD_ID<200000;

SELECT CARD_ID , COUNT(DONATE_AMOUNT)
FROM DONATION
WHERE CARD_ID<200000
GROUP BY CARD_ID;


------  lab 5------
--name who donated less than 100 nested query
SELECT USER_NAME,ACC_NO,CARD_ID
FROM CUSTOMER
WHERE CARD_ID IN (
    SELECT CARD_ID
    FROM DONATION
    WHERE DONATE_AMOUNT<100
);


-------LAB 06------


--name who donated less than 100 USING JOIN
SELECT C.USER_NAME, C.ACC_NO, D.DONATE_AMOUNT
FROM CUSTOMER C JOIN DONATION D
ON (C.CARD_ID= D.CARD_ID)AND(D.DONATE_AMOUNT>100); 


SELECT C.USER_NAME, C.ACC_NO, D.DONATE_AMOUNT
FROM CUSTOMER C NATURAL JOIN DONATION D
WHERE D.DONATE_AMOUNT>100;


--NATURAL JOIN 3 TABLES
SELECT U.USER_NAME, U.ACC_NO,T.TRANSAC_DATE, M.MACHINE_AREA
FROM CUSTOMER U NATURAL JOIN TRANSAC T NATURAL JOIN ATM_MACHINE M; 

--CAN'T USE QUALIFIER(ALIAS) FOR CARD_ID , AS IT IS COMMON FOR JOIN TABLE
SELECT U.USER_NAME, U.ACC_NO,T.TRANSAC_DATE, M.MACHINE_AREA,CARD_ID
FROM CUSTOMER U NATURAL JOIN TRANSAC T NATURAL JOIN ATM_MACHINE M; 

--OUTER JOOIN
SELECT C.USER_NAME,T.TRANSAC_AMOUNT
FROM CUSTOMER C LEFT OUTER JOIN TRANSAC T
ON C.CARD_ID=T.CARD_ID;

SELECT C.USER_NAME,T.TRANSAC_AMOUNT
FROM CUSTOMER C RIGHT OUTER JOIN TRANSAC T
ON C.CARD_ID=T.CARD_ID;

SELECT C.USER_NAME,T.TRANSAC_AMOUNT
FROM CUSTOMER C FULL OUTER JOIN TRANSAC T
ON C.CARD_ID=T.CARD_ID;

------lab 07-----

SET SERVEROUTPUT ON
DECLARE
max_user_balance CUSTOMER.USER_BALANCE%TYPE;

BEGIN
SELECT MAX(USER_BALANCE) INTO max_user_balance
FROM CUSTOMER;

DBMS_OUTPUT.PUT_LINE('THE MAX AMOUNT IS '|| max_user_balance );
END;
/


SET SERVEROUTPUT ON
DECLARE
user_balance CUSTOMER.USER_BALANCE%TYPE;
CUST_NAME CUSTOMER.USER_NAME%TYPE := 'JAKE';

BEGIN
SELECT USER_BALANCE INTO user_balance
FROM CUSTOMER
WHERE USER_NAME=CUST_NAME;

DBMS_OUTPUT.PUT_LINE ( CUST_NAME||'S BALANCE IS '|| user_balance );
END;
/

SET SERVEROUTPUT ON
DECLARE
DONATED DONATION.DONATE_AMOUNT%TYPE;
CUST_NAME CUSTOMER.USER_NAME%TYPE;
DONATE_CARD_ID DONATION.CARD_ID%TYPE;

BEGIN
CUST_NAME :='TOM';
SELECT DONATE_AMOUNT INTO DONATED
FROM DONATION ,CUSTOMER
WHERE DONATION.CARD_ID =  CUSTOMER.CARD_ID AND  USER_NAME=CUST_NAME;

IF DONATED>100 THEN
    DBMS_OUTPUT.PUT_LINE ( 'THANKS FOR BIG CONTRIBUTION' );
ELSIF DONATED=100 THEN
    DBMS_OUTPUT.PUT_LINE ( 'THANKS FOR MID CONTRIBUTION' );

ELSE
    DBMS_OUTPUT.PUT_LINE ( 'THANKS FOR SMALL CONTRIBUTION' );
END IF;


END;
/


------LAB 08 -----

CREATE OR REPLACE PROCEDURE ADD_TRANSACTION (
    card_num TRANSAC.CARD_ID%TYPE,
    machine_num TRANSAC.MACHINE_ID%TYPE ,
    amount TRANSAC.TRANSAC_AMOUNT%TYPE, 
    t_date TRANSAC.TRANSAC_DATE%TYPE) IS

    BEGIN 
    INSERT INTO transac(card_id, machine_id,transac_amount, transac_date) 
    VALUES(card_num , machine_num , amount, t_date);
    END ADD_TRANSACTION;
    /
    SHOW ERRORS

    SELECT * FROM TRANSAC;

BEGIN
    ADD_TRANSACTION(222233, 2, 20000, '19-JUL-2022');
END;
/



CREATE OR REPLACE FUNCTION AVG_BALANCE RETURN NUMBER IS
   avg_BALANCE CUSTOMER.USER_BALANCE%type;
BEGIN
  SELECT AVG(USER_BALANCE) INTO AVG_BALANCE
  FROM CUSTOMER;
   RETURN AVG_BALANCE;
END;
/

BEGIN
     DBMS_OUTPUT.PUT_LINE ( 'AVARAGE BALANCE OF USER: ' || AVG_BALANCE);
END;
/
